---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Sample VPC - Private and Public subnets'

Parameters:

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for public subnet 02 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for private subnet 02 within the VPC

  NamePrefix:
    Type: String
    Default: labs-eks
    Description: Resource name prefix for all

  C9EC2InstanceType:
    Description: EC2 instance type on which IDE runs, at least 8 GB of memory (eg m5.large) if test the kind scenario
    Type: String
    Default: m5.large
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - c5.large
      - c5.xlarge

  C9AutoHibernateTimeout:
    Description: How many minutes idle before shutting down the IDE. Options, 30min, 1hr, 4hr, 1day, 1week, Never (0)
    Type: Number
    Default: 0
    AllowedValues:
      - 30
      - 60
      - 240
      - 1440
      - 10080
      - 0

  C9DeployToPublicSubnet:
    Description: Whether to deploy Cloud9 IDE in public subnet
    Type: String
    Default: "TRUE"
    AllowedValues:
      - "TRUE"
      - "FALSE"

  C9CreateSSMRole:
    Description: Whether to create the SSM role, if not the first time to run this templdate, please choose FALSE
    Type: String
    Default: "FALSE"
    AllowedValues:
      - "TRUE"
      - "FALSE"

Conditions:
  UseC9PublicSubnet: !Equals [!Ref C9DeployToPublicSubnet, "TRUE"]
  CreateC9SSMRole: !Equals
    - "TRUE"
    - !Ref C9CreateSSMRole

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
          - NamePrefix
          - C9EC2InstanceType
          - C9AutoHibernateTimeout
          - C9DeployToPublicSubnet
          - C9CreateSSMRole

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${NamePrefix}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${NamePrefix}-NatGatewayAZ1'

  NatGateway02:
    DependsOn:
    - NatGatewayEIP2
    - PublicSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
      - Key: Name
        Value: !Sub '${NamePrefix}-NatGatewayAZ2'

  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-PublicSubnet01"
      - Key: kubernetes.io/role/elb
        Value: 1

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-PublicSubnet02"
      - Key: kubernetes.io/role/elb
        Value: 1

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-PrivateSubnet01"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-PrivateSubnet02"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-control-plane"

  ControlPlaneSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
        GroupId: !Ref SharedNodeSecurityGroup
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
        SourceSecurityGroupId: !GetAtt ControlPlaneSecurityGroup.GroupId

  SharedNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all internal communications
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcBlock
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-shared-node"

  SharedNodeSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
        GroupId: !Ref SharedNodeSecurityGroup
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
        SourceSecurityGroupId: !GetAtt SharedNodeSecurityGroup.GroupId

  ExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow external ssh for public access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0                  
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-external"

  ExternalSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
        GroupId: !Ref ExternalSecurityGroup
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
        SourceSecurityGroupId: !GetAtt ExternalSecurityGroup.GroupId

  # KMS EKS encryption key
  EKSKey:
    Type: AWS::KMS::Key
    Properties:
      # MultiRegion: true
      KeyPolicy:
        Version: 2012-10-17
        Id: key-eks
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
  EKSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/eks
      TargetKeyId:
        Ref: EKSKey


  # Cloud9
  C9SSMAccessRole:
    Condition: CreateC9SSMRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloud9.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: "Service linked role for AWS Cloud9"
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloud9SSMInstanceProfile
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
      RoleName: "AWSCloud9SSMAccessRole"

  C9SSMInstanceProfile:
    Condition: CreateC9SSMRole
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: AWSCloud9SSMInstanceProfile
      Path: "/cloud9/"
      Roles:
        - Ref: C9SSMAccessRole

  C9IDE:
    Type: "AWS::Cloud9::EnvironmentEC2"
    Properties:
      Name: !Sub "${NamePrefix}-cloud9-ide"
      Description: "Cloud9 IDE"
      AutomaticStopTimeMinutes: !Ref "C9AutoHibernateTimeout"
      SubnetId:
        !If [UseC9PublicSubnet, !Ref PublicSubnet01, !Ref PrivateSubnet01]
      InstanceType: !Ref "C9EC2InstanceType"
      ConnectionType: !If [UseC9PublicSubnet, CONNECT_SSH, CONNECT_SSM]


Outputs:
  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    
  ControlPlaneSecurityGroup:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  SharedNodeSecurityGroup:
    Description: Security group for the Shared Nodes
    Value: !Join [ ",", [ !Ref SharedNodeSecurityGroup ] ]

  PublicSubnetIds:
    Description: Public Subnets IDs in the VPC
    Value: !Join [ "\n", [ !Join [ ": ", ["PublicSubnet01", !Ref PublicSubnet01] ], !Join [ ": ", ["PublicSubnet02", !Ref PublicSubnet02] ] ] ]

  PrivateSubnetIds:
    Description: Private Subnets IDs in the VPC
    Value: !Join [ "\n", [ !Join [ ": ", ["PrivateSubnet01", !Ref PrivateSubnet01] ], !Join [ ": ", ["PrivateSubnet02", !Ref PrivateSubnet02] ] ] ]

  # EKSAlias:
  #   Description: 'RDS KMS Encryption Key Alias'
  #   Value:
  #     Ref: 'EKSAlias'

  EKSKeyArn:
    Description: 'EKS Key ARN.'
    Value: !GetAtt 'EKSKey.Arn'
    Export:
      Name: 'EKS-KeyArn'

  Cloud9URL:
    Description: Cloud9 Environment
    Value:
      Fn::Join:
        - ""
        - - !Sub https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/
          - !Ref "C9IDE"
